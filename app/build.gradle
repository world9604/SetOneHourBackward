plugins {
    id 'com.android.application'
}

ext {
    home = System.getenv('PMAPP_HOME')
    keyStore = "${home}/KeyStore"
}

android {
    namespace 'device.apps.setonehourbackward'
    compileSdk 33

    signingConfigs {
        pointmobileconfig {
            keyAlias 'platform'
            keyPassword 'pointmobile_omap3pm'
            storeFile file("${keyStore}/pointmobile.jks")
            storePassword 'pointmobile_omap3pm'
        }
        androidConfig {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("${keyStore}/android.jks")
            storePassword 'android'
        }
        janamConfig {
            keyAlias 'platform'
            keyPassword 'janamkey'
            storeFile file("${keyStore}/janam.jks")
            storePassword 'janamkey'
        }
        viewatPlatfrom {
            keyAlias 'platform'
            keyPassword 'pointmobile_omap3pm'
            storeFile file("${keyStore}/pointmobile_pm500.jks")
            storePassword 'pointmobile_omap3pm'
        }
        uploadConfig {
            keyAlias 'dev.android'
            keyPassword 'vB=U27Y&Df&CKhuf'
            storeFile file("${keyStore}/upload/upload.jks")
            storePassword 'vB=U27Y&Df&CKhuf'
        }
    }

    defaultConfig {
        applicationId "device.apps.setonehourbackward"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.pointmobileconfig
        }
        debug{
            signingConfig signingConfigs.pointmobileconfig
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    //implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.appcompat:appcompat:1.0.0'

    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    compileOnly files ('libs/framework.a9.jar')

    preBuild {
        doLast {
            def imlFile = file(project.name + ".iml")
            println 'Change ' + project.name + '.iml order'
            try {
                def parsedXml = (new XmlParser()).parse(imlFile)
                def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
                parsedXml.component[1].remove(jdkNode)
                def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) + " Platform"
                new Node(parsedXml.component[1], 'orderEntry', ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
                groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
            } catch (FileNotFoundException e) {
                // nop, iml not found
            }
        }
    }
}

task releaseDeploy {
    finalizedBy {
        def name_prefix = "${rootProject.name}_${AppVersionName}"
        def release_path = '../../apk'
        def release_apk = "build/outputs/apk/release"
        if (project.hasProperty("buildDate")) {
            def buildDate = (new Date()).format('MMddHHmm')
            name_prefix = "${name_prefix}_${buildDate}"
        }

        // APK 배포
        task(deployApk, type: Copy) {
            from "${release_apk}"
            into "${release_path}"
            rename('.*.apk', "${name_prefix}.apk")
            include('**/*release.apk')
        }
    }
}

task releaseBuild(dependsOn: ['assembleRelease']) {
}

task release(dependsOn: ['clean', 'releaseBuild', 'releaseDeploy']) {
    releaseBuild.mustRunAfter clean
    releaseDeploy.mustRunAfter releaseBuild
}
